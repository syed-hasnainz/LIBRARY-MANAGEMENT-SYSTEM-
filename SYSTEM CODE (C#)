using System;
using System.Collections.Generic;

public class Book
{
    public string Title { get; set; }
    public string Author { get; set; }
    public string ISBN { get; set; }
    public string Publication { get; set; }
    public bool IsReserved { get; set; }
    public DateTime? DueDate { get; set; } // Nullable DateTime for when no book is borrowed

    public Book(string title, string author, string isbn, string publication)
    {
        Title = title;
        Author = author;
        ISBN = isbn;
        Publication = publication;
        IsReserved = false;
        DueDate = null;  // No due date when the book is not borrowed
    }

    public void DisplayInfo()
    {
        Console.WriteLine($"Title: {Title}, Author: {Author}, ISBN: {ISBN}, Publication: {Publication}, Reserved: {IsReserved}");

        // Only display DueDate if the book is reserved (borrowed) and has a valid due date
        if (IsReserved && DueDate.HasValue)
        {
            Console.WriteLine($"Due Date: {DueDate.Value.ToString("dd/MM/yyyy")}");
        }
    }

    public void UpdateDetails(string newTitle, string newAuthor, string newISBN, string newPublication)
    {
        Title = newTitle;
        Author = newAuthor;
        ISBN = newISBN;
        Publication = newPublication;
        Console.WriteLine("Book details updated successfully.");
    }
}

public class TreeNode
{
    public Book Book { get; set; }
    public TreeNode Left { get; set; }
    public TreeNode Right { get; set; }

    public TreeNode(Book book)
    {
        Book = book;
        Left = null;
        Right = null;
    }
}

public class BookTree
{
    private TreeNode root;

    public BookTree()
    {
        root = null;
    }

    public void Add(Book book)
    {
        root = AddRecursive(root, book);
    }

    private TreeNode AddRecursive(TreeNode node, Book book)
    {
        if (node == null)
        {
            return new TreeNode(book);
        }

        if (string.Compare(book.Title, node.Book.Title, StringComparison.OrdinalIgnoreCase) < 0)
        {
            node.Left = AddRecursive(node.Left, book);
        }
        else
        {
            node.Right = AddRecursive(node.Right, book);
        }

        return node;
    }

    public Book Search(string title)
    {
        return SearchRecursive(root, title);
    }

    private Book SearchRecursive(TreeNode node, string title)
    {
        if (node == null)
        {
            return null; // Book not found
        }

        if (string.Compare(title, node.Book.Title, StringComparison.OrdinalIgnoreCase) == 0)
        {
            return node.Book; // Book found
        }

        return string.Compare(title, node.Book.Title, StringComparison.OrdinalIgnoreCase) < 0
            ? SearchRecursive(node.Left, title)
            : SearchRecursive(node.Right, title);
    }
}

public static class LibraryManagementSystem
{
    private static Dictionary<string, Book> booksDictionary = new Dictionary<string, Book>();
    private static BookTree bookTree = new BookTree();
    private static List<User> registeredUsers = new List<User>();
    private static User currentUser = null;

    public static void Main(string[] args)
    {
        bool running = true;

        while (running)
        {
            if (currentUser == null)
            {
                Console.WriteLine("\n--- Library Management System ---");
                Console.WriteLine("1. Register");
                Console.WriteLine("2. Login");
                Console.WriteLine("3. Exit");
                Console.Write("Choose an option: ");

                try
                {
                    int choice = int.Parse(Console.ReadLine());
                    switch (choice)
                    {
                        case 1:
                            Register();
                            break;
                        case 2:
                            Login();
                            break;
                        case 3:
                            running = false;
                            break;
                        default:
                            Console.WriteLine("Invalid option. Try again.");
                            break;
                    }
                }
                catch (FormatException)
                {
                    Console.WriteLine("Invalid input. Please enter a number.");
                }
            }
            else
            {
                currentUser.DisplayMenu();
                HandleMenuInput(currentUser);
            }
        }
    }

    private static void HandleMenuInput(User user)
    {
        Console.Write("Select an option: ");
        
        try
        {
            int choice = int.Parse(Console.ReadLine());

            if (user is Librarian)
            {
                switch (choice)
                {
                    case 1: AddBook(); break;
                    case 2: DeleteBook(); break;
                    case 3: UpdateBook(); break;
                    case 4: DisplayAllBooks(); break;
                    case 5: SearchBooks(); break;
                    case 6: Logout(); break;
                    default: Console.WriteLine("Invalid option."); break;
                }
            }
            else if (user is Student || user is Staff)
            {
                switch (choice)
                {
                    case 1: SearchBooks(); break;
                    case 2: user.DisplayBorrowedBooks(); break;
                    case 3: RequestOrBorrowBook(user); break;  
                    case 4: CheckFine(user); break;  // Added to check fine
                    case 5: RequestExtension(user); break;  // Added to request extension
                    case 6: Logout(); break;
                    default: Console.WriteLine("Invalid option."); break;
                }
            }
        }
        catch (FormatException)
        {
            Console.WriteLine("Invalid input. Please enter a number.");
        }
    }

    private static void AddBook()
    {
        Console.WriteLine("Enter Book Details:");
        Console.Write("Title: ");
        string title = Console.ReadLine();
        Console.Write("Author: ");
        string author = Console.ReadLine();
        Console.Write("ISBN: ");
        string isbn = Console.ReadLine();
        Console.Write("Publication: ");
        string publication = Console.ReadLine();

        Book book = new Book(title, author, isbn, publication);
        booksDictionary[isbn] = book; // Add to hash map
        bookTree.Add(book); // Add to binary tree
        Console.WriteLine("Book added successfully.");
    }

    private static void DeleteBook()
    {
        Console.Write("Enter ISBN of the book to delete: ");
        string isbn = Console.ReadLine();
        
        if (booksDictionary.Remove(isbn))
        {
            Console.WriteLine("Book deleted successfully.");
        }
        else
        {
            Console.WriteLine("Book not found.");
        }
    }

    private static void UpdateBook()
    {
        Console.Write("Enter ISBN of the book to update: ");
        string isbn = Console.ReadLine();
        
        if (booksDictionary.TryGetValue(isbn, out Book bookToUpdate))
        {
            Console.WriteLine("Enter new details for the book:");
            Console.Write("Title: ");
            string newTitle = Console.ReadLine();
            Console.Write("Author: ");
            string newAuthor = Console.ReadLine();
            Console.Write("ISBN: ");
            string newISBN = Console.ReadLine();
            Console.Write("Publication: ");
            string newPublication = Console.ReadLine();

            bookToUpdate.UpdateDetails(newTitle, newAuthor, newISBN, newPublication);
            // Update the hash map with the new ISBN
            if (newISBN != isbn)
            {
                booksDictionary.Remove(isbn); // Remove old ISBN
                booksDictionary[newISBN] = bookToUpdate; // Add with new ISBN
            }
        }
        else
        {
            Console.WriteLine("Book not found.");
        }
    }

    private static void DisplayAllBooks()
    {
        Console.WriteLine("All books in the library:");
        foreach (var book in booksDictionary.Values)
        {
            book.DisplayInfo();
        }
    }

    private static void SearchBooks()
    {
        Console.Write("Enter search term (title): ");
        string searchString = Console.ReadLine();

        var result = bookTree.Search(searchString);
        if (result != null)
        {
            result.DisplayInfo();
        }
        else
        {
            Console.WriteLine("No books found matching your search.");
        }
    }

    private static void Register()
    {
        string id, name, password, role;

        do
        {
            Console.Write("Enter your ID: ");
            id = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(id))
            {
                Console.WriteLine("ID cannot be empty. Please enter a valid ID.");
            }
        } while (string.IsNullOrWhiteSpace(id));

        User existingUser = registeredUsers.Find(user => user.ID == id);
        if (existingUser != null)
        {
            Console.WriteLine("A user with this ID already exists. Please try with a different ID.");
            return;
        }

        do
        {
            Console.Write("Enter your Name: ");
            name = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(name))
            {
                Console.WriteLine("Name cannot be empty. Please enter a valid name.");
            }
        } while (string.IsNullOrWhiteSpace(name));

        do
        {
            Console.Write("Enter your Password: ");
            password = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(password))
            {
                Console.WriteLine("Password cannot be empty. Please enter a valid password.");
            }
        } while (string.IsNullOrWhiteSpace(password));

        do
        {
            Console.Write("Enter your Role (Student/Staff/Librarian): ");
            role = Console.ReadLine().ToLower();
            if (role != "student" && role != "staff" && role != "librarian")
            {
                Console.WriteLine("Invalid role. Please enter either Student, Staff, or Librarian.");
            }
        } while (role != "student" && role != "staff" && role != "librarian");

        User newUser = null;
        if (role == "librarian")
        {
            newUser = new Librarian(id, name, password);
        }
        else if (role == "student")
        {
            newUser = new Student(id, name, password);
        }
        else if (role == "staff")
        {
            newUser = new Staff(id, name, password);
        }

        registeredUsers.Add(newUser);
        Console.WriteLine("Registration successful! You can now log in.");
    }

    private static void Login()
    {
        Console.Write("Enter your ID: ");
        string id = Console.ReadLine();
        Console.Write("Enter your Password: ");
        string password = Console.ReadLine();

        currentUser = registeredUsers.Find(user => user.ID == id && user.Password == password);
        if (currentUser == null)
        {
            Console.WriteLine("Invalid ID or password. Please try again.");
        }
        else
        {
            Console.WriteLine($"Welcome, {currentUser.Name}!");
        }
    }

    private static void Logout()
    {
        currentUser = null;
        Console.WriteLine("You have logged out successfully.");
    }

    private static void RequestOrBorrowBook(User user)
    {
        Console.Write("Enter the ISBN of the book to borrow: ");
        string isbn = Console.ReadLine();

        if (booksDictionary.TryGetValue(isbn, out Book bookToBorrow) && !bookToBorrow.IsReserved)
        {
            bookToBorrow.IsReserved = true; // Mark the book as borrowed
            bookToBorrow.DueDate = DateTime.Now.AddDays(14); // Set due date to 14 days from now
            user.BorrowedBooks.Add(bookToBorrow);
            Console.WriteLine($"You have successfully borrowed '{bookToBorrow.Title}'.");
        }
        else if (bookToBorrow.IsReserved)
        {
            Console.WriteLine("The book is already borrowed by someone else.");
        }
        else
        {
            Console.WriteLine("Book not found.");
        }
    }

    private static void CheckFine(User user)
    {
        Console.WriteLine("Checking fine amount...");
        foreach (var book in user.BorrowedBooks)
        {
            if (book.DueDate.HasValue && book.DueDate.Value < DateTime.Now)
            {
                int daysOverdue = (DateTime.Now - book.DueDate.Value).Days;
                int fineAmount = daysOverdue * 50; // Fine of 50 per day
                Console.WriteLine($"Book: {book.Title} - Fine Amount: {fineAmount}");
            }
        }
    }

    private static void RequestExtension(User user)
    {
        Console.Write("Enter the title of the book to request an extension: ");
        string title = Console.ReadLine();

        foreach (var book in user.BorrowedBooks)
        {
            if (book.Title.Equals(title, StringComparison.OrdinalIgnoreCase))
            {
                Console.Write("Enter the new due date (dd/mm/yyyy): ");
                string inputDate = Console.ReadLine();
                if (DateTime.TryParseExact(inputDate, "dd/MM/yyyy", null, System.Globalization.DateTimeStyles.None, out DateTime newDueDate))
                {
                    book.DueDate = newDueDate;
                    Console.WriteLine($"Extension granted! New Due Date: {book.DueDate.Value.ToString("dd/MM/yyyy")}");
                    return;
                }
                else
                {
                    Console.WriteLine("Invalid date format. Please enter the date in dd/mm/yyyy format.");
                }
            }
        }
        Console.WriteLine("You do not have a book with that title borrowed.");
    }
}

public abstract class User
{
    public string ID { get; private set; }
    public string Name { get; private set; }
    public string Password { get; private set; }
    public List<Book> BorrowedBooks { get; set; }

    protected User(string id, string name, string password)
    {
        ID = id;
        Name = name;
        Password = password;
        BorrowedBooks = new List<Book>();
    }

    public abstract void DisplayMenu();

    public void DisplayBorrowedBooks()
    {
        Console.WriteLine("Borrowed Books:");
        foreach (var book in BorrowedBooks)
        {
            book.DisplayInfo();
        }
    }
}

public class Librarian : User
{
    public Librarian(string id, string name, string password) : base(id, name, password) { }

    public override void DisplayMenu()
    {
        Console.WriteLine("\n--- Librarian Menu ---");
        Console.WriteLine("1. Add Book");
        Console.WriteLine("2. Delete Book");
        Console.WriteLine("3. Update Book");
        Console.WriteLine("4. Display All Books");
        Console.WriteLine("5. Search Books");
        Console.WriteLine("6. Logout");
    }
}

public class Student : User
{
    public Student(string id, string name, string password) : base(id, name, password) { }

    public override void DisplayMenu()
    {
        Console.WriteLine("\n--- Student Menu ---");
        Console.WriteLine("1. Search Books");
        Console.WriteLine("2. Display Borrowed Books");
        Console.WriteLine("3. Request/Borrow Book");
        Console.WriteLine("4. Check Fine");
        Console.WriteLine("5. Request Extension");
        Console.WriteLine("6. Logout");
    }
}

public class Staff : User
{
    public Staff(string id, string name, string password) : base(id, name, password) { }

    public override void DisplayMenu()
    {
        Console.WriteLine("\n--- Staff Menu ---");
        Console.WriteLine("1. Search Books");
        Console.WriteLine("2. Display Borrowed Books");
        Console.WriteLine("3. Request/Borrow Book");
        Console.WriteLine("4. Check Fine");
        Console.WriteLine("5. Request Extension");
        Console.WriteLine("6. Logout");
    }
}
